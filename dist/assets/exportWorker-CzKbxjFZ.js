(function(){"use strict";function I(r,n,a,t,e,o){const l=Math.min(o,Math.min(t,e)/2);r.beginPath(),r.moveTo(n+l,a),r.arcTo(n+t,a,n+t,a+e,l),r.arcTo(n+t,a+e,n,a+e,l),r.arcTo(n,a+e,n,a,l),r.arcTo(n,a,n+t,a,l),r.closePath()}async function C(r){const a=await(await fetch(r)).blob();return await createImageBitmap(a,{imageOrientation:"from-image"})}async function v(r){const{imageSrc:n,pixelCrop:a,opts:t}=r,e=await C(n),o=Math.max(e.width,e.height)*1.5,h=new OffscreenCanvas(o,o).getContext("2d");h.translate(o/2,o/2),h.rotate((t.rotation||0)*Math.PI/180),h.translate(-o/2,-o/2),h.drawImage(e,(o-e.width)/2,(o-e.height)/2);const T=h.getImageData(0,0,o,o),m=t.padding||0,g=Math.round(a.width+m*2),d=Math.round(a.height+m*2),u=new OffscreenCanvas(g,d),p=u.getContext("2d");t.background?(p.fillStyle=t.background,p.fillRect(0,0,g,d)):p.clearRect(0,0,g,d),p.putImageData(T,Math.round(-(o/2)+e.width/2-(a.x-m)),Math.round(-(o/2)+e.height/2-(a.y-m)));let c=g,i=d;if(t.mask==="circle"){const f=Math.min(g,d);c=f,i=f}const b=new OffscreenCanvas(c,i),s=b.getContext("2d");if(t.background?(s.fillStyle=t.background,s.fillRect(0,0,c,i)):s.clearRect(0,0,c,i),t.filters,s.save(),t.mask==="circle"){const f=Math.min(g,d);s.beginPath(),s.arc(c/2,i/2,f/2,0,Math.PI*2),s.closePath(),s.clip(),s.drawImage(u,Math.floor((g-c)/2)*-1,Math.floor((d-i)/2)*-1)}else t.mask==="roundRect"&&(I(s,0,0,c,i,t.radius||24),s.clip()),s.drawImage(u,0,0,c,i);s.restore();let w=b;if(t.outSize&&t.outSize>0){const f=(t.mask==="rect",t.outSize),M=t.mask==="rect"?Math.round(t.outSize*(i/c)):t.outSize,k=new OffscreenCanvas(f,M),S=k.getContext("2d");S.imageSmoothingQuality="high",S.drawImage(b,0,0,f,M),w=k}const y=t.mask!=="rect"&&t.format==="jpeg"?"image/png":"image/"+(t.format||"png");return await w.convertToBlob({type:y,quality:t.quality||.92})}self.onmessage=async r=>{const{tasks:n}=r.data,a=[];for(let t=0;t<n.length;t++){const e=n[t];try{const l=await(await v(e)).arrayBuffer();self.postMessage({type:"progress",done:t+1,total:n.length}),a.push({id:e.id,ok:!0,data:l})}catch(o){a.push({id:e.id,ok:!1,error:String(o)})}}self.postMessage({type:"done",results:a},[...a.filter(t=>t.ok).map(t=>t.data).map(t=>t)])}})();
